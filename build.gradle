plugins {
    id 'java'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.21.0'
    id 'com.gradleup.shadow' version '9.0.0-beta12'
    id 'xyz.wagyourtail.jvmdowngrader' version "1.3.3"
}

group = 'io.github.pacifistmc.forgix'

// Make sure to change the version number in io.github.pacifistmc.forgix.Forgix
def constantsSource = rootProject.file("src/main/java/io/github/pacifistmc/forgix/Forgix.java").text
version = (constantsSource =~ /\s+VERSION\s*=\s*"(.*)";/)[0][1]

configurations {
    shade.extendsFrom downgradeShade
    compileOnly.extendsFrom shade
    testImplementation.extendsFrom compileOnly
    testAnnotationProcessor.extendsFrom annotationProcessor
}

repositories {
    mavenCentral()
    maven {
        name = 'FirstDarkDev'
        url = 'https://maven.firstdarkdev.xyz/releases/'
    }
    maven {
        name = 'FabricMC'
        url = 'https://maven.fabricmc.net/'
    }
}

String manifoldVersion = '2025.1.20'

dependencies {
    implementation gradleApi()

    shade "systems.manifold:manifold-rt:${manifoldVersion}"
    shade "systems.manifold:manifold-props-rt:${manifoldVersion}"
    shade "systems.manifold:manifold-params-rt:${manifoldVersion}"
    shade "systems.manifold:manifold-ext-rt:${manifoldVersion}"
    shade "systems.manifold:manifold-tuple-rt:${manifoldVersion}"
    annotationProcessor "systems.manifold:manifold-exceptions:${manifoldVersion}"
    annotationProcessor "systems.manifold:manifold-props:${manifoldVersion}"
    annotationProcessor "systems.manifold:manifold-params:${manifoldVersion}"
    annotationProcessor "systems.manifold:manifold-tuple:${manifoldVersion}"
    annotationProcessor "systems.manifold:manifold-strings:${manifoldVersion}"

    downgradeShade 'net.lingala.zip4j:zip4j:2.11.5'
    downgradeShade 'commons-io:commons-io:2.19.0'
    downgradeShade 'com.google.code.gson:gson:2.13.1'

    downgradeShade('net.fabricmc:tiny-remapper:0.11.1') {
        exclude group: 'org.ow2.asm'
    }
    downgradeShade 'org.ow2.asm:asm:9.8'
    downgradeShade 'org.ow2.asm:asm-commons:9.8'
    downgradeShade 'org.ow2.asm:asm-tree:9.8'
    downgradeShade 'org.ow2.asm:asm-util:9.8'

    shade fileTree(dir: 'src/main/resources/multiversion', include: '*.jar').filter { file ->
        !file.name.contains('-javadoc') && !file.name.contains('-sources')
    }

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

downgradeJar.inputFile = tasks.jar.archiveFile
jvmdg.dg(configurations.downgradeShade)

shadowJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    configurations = [project.configurations.shade]

    relocate "net.fabricmc", "pacifistmc.libraries.net.fabricmc"
    relocate "org.objectweb.asm", "pacifistmc.libraries.org.objectweb.asm"
    relocate "org.apache.commons.io", "pacifistmc.libraries.org.apache.commons.io"
    relocate "net.lingala.zip4j", "pacifistmc.libraries.net.lingala.zip4j"
    relocate "com.google", "pacifistmc.libraries.com.google"

    exclude 'META-INF/services/**'

    // Make shadowJar use shadeDowngradedApi
    dependsOn tasks.shadeDowngradedApi
    from(zipTree(tasks.named('shadeDowngradedApi').flatMap { it.archiveFile }))
    archiveClassifier.set(null)
}

gradlePlugin {
    plugins {
        Forgix {
            id = "io.github.pacifistmc.forgix"
            displayName = 'Forgix'
            description = 'This plugin merges all your modloader & plugin jars into a single jar.'
            implementationClass = "io.github.pacifistmc.forgix.plugin.ForgixGradlePlugin"
        }
    }
}


pluginBundle {
    website = 'https://github.com/PacifistMC'
    vcsUrl = 'https://github.com/PacifistMC/Forgix'
    tags = ['forge', 'minecraftforge', 'merge', 'jars', 'fabric', 'fabricmc', 'quilt', 'quiltmc', 'neoforge', 'neoforged', 'minecraft', 'architectury', 'forgix', 'pacifistmc']
}

publishing {
    repositories {
        maven {
            name = 'localPluginRepository'
            url = '../local-plugin-repository'
        }
    }
}

tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

tasks.withType(Sign).configureEach {
    enabled = false
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-Xplugin:Manifold', '--add-exports=java.base/jdk.internal.access=ALL-UNNAMED']
}

test.useJUnitPlatform()
jar.finalizedBy(shadowJar)
javadoc.enabled(false) // Doesn't work well with Manifold


// This task builds the multiversion mod and copies it to resources
tasks.register('buildMultiversionMod', Exec) {
    description = 'Builds the Forgix-Multiversion-Mod and copies the merged jar to resources'
    group = 'forgix'

    // Check if the multiversion jar already exists
    def resourcesDir = file('src/main/resources/multiversion')
    def multiversionJar = new File(resourcesDir, 'forgix-multiversion.jar')

    // Skip the task if the jar already exists
    onlyIf {
        !multiversionJar.exists()
    }

    workingDir = file('./Forgix-Multiversion-Mod')

    // Run assemble and then mergeJars tasks in the multiversion mod project
    def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
    commandLine isWindows ? 'gradlew.bat' : './gradlew', 'assemble'
    commandLine isWindows ? 'gradlew.bat' : './gradlew', 'mergeJars'

    doLast {
        // Create the resources directory if it doesn't exist
        resourcesDir.mkdirs()

        // Find the merged jar in the multiversion mod's build directory
        def mergedJarDir = file('./Forgix-Multiversion-Mod/build/merged')
        def mergedJar = mergedJarDir.listFiles().find { it.name.endsWith('.jar') }

        if (!mergedJar) {
            throw new GradleException("No merged jar found in ${mergedJarDir}")
        }
        // Copy the merged jar to the resources directory
        copy {
            from mergedJar
            into resourcesDir
            rename { 'forgix-multiversion.jar' }
        }
    }
}

// Run the buildMultiversionMod task before compiling Java sources so that the merged jar is available in resources
compileJava.dependsOn buildMultiversionMod